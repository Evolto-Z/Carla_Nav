import torch
from torchvision import models
from algorithm.model import *


# encoder = ConvEncoder()
# input = torch.rand(1, 4, 3, 216, 288)
# embed = encoder(input)
# print(embed.shape)
# decoder = TrafficLightDecoder()
# embed = torch.rand(1, 4, 1024)
# presence, signal, distance = decoder(embed)
# print("Traffic Light: \n{}\n{}\n{}".format(presence, signal, distance))
# decoder = JunctionDecoder()
# presence = decoder(embed)
# print("Juction: \n", presence)
# decoder = LaneDecoder()
# offset, yaw = decoder(embed)
# print("Lane: \n{}\n{}".format(offset, yaw))
# decoder = ActionDecoder(3)
# embed = torch.rand(3, 7168)
# action_dist = decoder(embed)
# print("Action: \n", action_dist.rsample())
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model = MyModel().to(device)
input = torch.rand(2, 5, 3, 216, 288)
action = model(input)
print(action)
dynamic_embed, static_embed = model.encode(input)
print(dynamic_embed.shape)
print(static_embed.shape)
tl_pred, junction_pred, lane_pred, action_dist = model.decode(dynamic_embed, static_embed)
print(tl_pred)
print(junction_pred)
print(lane_pred)
print(action_dist.log_prob(action))
